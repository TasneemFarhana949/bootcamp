# -*- coding: utf-8 -*-
"""datascience with python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pZg7KoulEFYT5G51CCycSwlYD_nxxwIY
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')
from sklearn.preprocessing import OrdinalEncoder,power_transform,StandardScaler,MinMaxScaler
from sklearn.model_selection import train_test_split,cross_val_score,GridSearchCV,KFold
from sklearn.ensemble import ExtraTreesRegressor,RandomForestRegressor
from sklearn.linear_model import LinearRegression,Lasso
from lightgbm import LGBMRegressor
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score
!pip install scikit-plot
import scikitplot as skplt

import pandas as pd

df = pd.read_csv("/content/temp. .csv")

df.head()

df.shape

df.drop_duplicates()

df.isna().sum()

df.describe()

df.head(3)

df.info()

data = pd.read_csv("/content/temp. .csv")

data['Date']=pd.to_datetime(data['Date'])

data.info()

data['year'] = data['Date'].dt.year
data['month'] = data['Date'].dt.month
data['day'] = data['Date'].dt.day

data.head()

data.drop(['Date'],axis=1,inplace=True)

data.head()

col=['DEM','day','month','Slope','year','station']

sns.countplot(x='month',data=data)

sns.distplot(data['Present_Tmax'])

sns.stripplot(x=data['year'],y=data['Present_Tmax'])

plt.figure(figsize=(15,8))
sns.lineplot(x='year',y='Next_Tmax',data=data)
sns.lineplot(x='year',y='Next_Tmin',data=data)
plt.xticks(fontsize=13)
plt.yticks(fontsize=13)
plt.legend(['Next_Tmax','Next_Tmin'],fontsize=15)
plt.show()

data.head(3)

data.info()

# data = pd.read_csv("# data = pd.read_csv("/content/temp. .csv")

def preprocessing(df):
  df=df.copy()
  for column in ['Present_Tmax','Present_Tmin','LDAPS_RHmin','LDAPS_RHmax','LDAPS_Tmax_lapse','LDAPS_Tmin_lapse','LDAPS_WS','LDAPS_LH','LDAPS_CC1','LDAPS_CC2','LDAPS_CC3','LDAPS_CC4','LDAPS_PPT1','LDAPS_PPT2','LDAPS_PPT3','LDAPS_PPT4','DEM','Slope','Solar radiation','Next_Tmax','Next_Tmin']:
    df[column]=df[column].fillna(df[column].mean())
  for column in ['year','month','day','station']:
    df[column]=df[column].fillna(df[column].mode()[0])
  X=df.drop(['Next_Tmax','Next_Tmin'],axis=1)
  y=df[['Next_Tmax','Next_Tmin']]
  return X,y

X,y = preprocessing(data)

X

y

# ['a',"b","c"] [1.0,2.3,3.3]

x= X
X_corr=X.corr()
plt.figure(figsize=(20,15))
sns.heatmap(X_corr,annot=True)

X

y

[100,99,98,54,52,4,1,3,54,24]

99/100

100/100

scaler=StandardScaler()
X_new=scaler.fit_transform(X)
X_new=pd.DataFrame(X_new,columns=x.columns)

X_new

X_train,X_test,y_train,y_test=train_test_split(X_new,y,test_size=0.3,random_state=42)

X_train

y_train

X_test

y_test

models={
    "ExtraTreesRegressor":ExtraTreesRegressor(),
    "RandomForestRegressor":RandomForestRegressor(),
    "LinearRegression":LinearRegression(),
    "DecisionTreeRegressor":DecisionTreeRegressor(),
    "Lasso":Lasso()
}

ETR = ExtraTreesRegressor()

ETR.fit(X_train,y_train)

ETR.predict(X_test)

y_test

RF = RandomForestRegressor()

RF.fit(X_train,y_train)

RF.predict(X_test)

y_test

LR = LinearRegression()

LR.fit(X_train,y_train)

LR.predict(X_test)

y_test

